FORMAT: 1A
HOST: https://localhost/api/

# REST Test

#Для кожного запита треба надсилати jwt окрім запита на авторизацію



## Авторизація [/login]
Запит на авторизацію користувача з отриманням токену jwt
### Успішна авторизація [POST]

+ Request (application/json)

        {
            "email": "admin@admin.com",
            "password": "password"
        }

+ Response 200 (application/json)

    + Body

        {
            "status": "success",
            "user": {
                "id": 1,
                "name": "Administrator",
                "email": "admin@admin.com",
                "email_verified_at": "2024-10-23T13:41:12.000000Z",
                "created_at": "2024-10-23T13:41:12.000000Z",
                "updated_at": "2024-10-23T13:41:12.000000Z"
            },
            "authorisation": {
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2FwaS9sb2dpbiIsImlhdCI6MTcyOTc2MjIxOCwiZXhwIjoxNzI5NzY1ODE4LCJuYmYiOjE3Mjk3NjIyMTgsImp0aSI6Ind0VVFaM3dlYUxUTjlTa08iLCJzdWIiOiIxIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyIsImVtYWlsIjoiYWRtaW5AYWRtaW4uY29tIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifQ.ZDg_gLe9JrlWizPHnuEY2KGJq-kL8iXJfW6G7O4trd8",
                "type": "bearer"
            }
        }

### Авторизація з помилками [POST]

+ Request (application/json)

        {
            "email": "admin1@admin.com",
            "password": "password"
        }

+ Response 401 (application/json)

    + Body

        {
            "status": "error",
            "message": "Unauthorized"
        }

## Реєстрація [/register]

Реєстрація користувача.

### Реєстрація успішна[POST]

+ Request (application/json)

        {
            "name": "Test",
            "email": "test@test.com",
            "password": "password"
        }

+ Response 200 (application/json)

    + Body

        {
            "status": "success",
            "message": "User created successfully",
            "user": {
                "name": "test",
                "email": "test@test.com",
                "updated_at": "2024-10-26T12:04:09.000000Z",
                "created_at": "2024-10-26T12:04:09.000000Z",
                "id": 12
            },
            "authorisation": {
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2FwaS9yZWdpc3RlciIsImlhdCI6MTcyOTk0NDI0OSwiZXhwIjoxNzI5OTQ3ODQ5LCJuYmYiOjE3Mjk5NDQyNDksImp0aSI6IjZ5UEN6N1FJY1hhZmxEaFAiLCJzdWIiOiIxMiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJuYW1lIjoidGVzdCJ9.rbKmhNN4ozmZzoKmZ5Q01bm-Z1u_cfR9c2tMC-lGcdk",
                "type": "bearer"
            }
        }

## Дані користувачів [/users]
Виводить користувачів з кількістю задач по кожному користувачу. Тільки для адміна

### Дані по задачам всіх користувачів[GET]
+ Response 200 (application/json)

    + Body

    {
        [
            {
                "email": "admin@admin.com",
                "total_tasks": 0
            },
            {
                "email": "medhurst.ignatius@example.com",
                "total_tasks": 1
            },
            {
                "email": "tierra43@example.com",
                "total_tasks": 1
            },
            {
                "email": "edmund60@example.com",
                "total_tasks": 0
            },
            {
                "email": "pcormier@example.org",
                "total_tasks": 0
            },
            {
                "email": "christiansen.vidal@example.net",
                "total_tasks": 0
            },
            {
                "email": "bogisich.elda@example.net",
                "total_tasks": 0
            },
            {
                "email": "waelchi.sean@example.com",
                "total_tasks": 0
            },
            {
                "email": "marvin42@example.org",
                "total_tasks": 0
            },
            {
                "email": "test@test.com",
                "total_tasks": 1
            }
        ]
    }

## Дані по задачі певного користувача [/users/{user}]
### Дані по задачі певного користувача[GET]
+ Response 200 (application/json)

    + Body

        {
            [
                {
                    "email": "test@test.com",
                    "categories": [
                        {
                            "name": "Urgent tasks",
                            "count_tasks": 0
                        },
                        {
                            "name": "Test updated",
                            "count_tasks": 1
                        }
                    ],
                    "total_tasks": 1
                }
            ]
        }

## Зміна даних користувача [/users/{user}]
Зміна ролі певного користувача. В урл має міститись ІД користувача 

### Зміна даних користувача[PATCH]

+ Request (application/json)

        {
            "role": "admin",
            "name": "Test"
        }

+ Response 200 (application/json)

    + Body
        {
            "Success change user data"
        }


## Категорії [/category]

При отримані списку всіх категорій, відбуваєтьсьтя перевірка ролі користувача. Якщо це адмін - виводиться перелік усіх категорій. Якщо це користувач - виводяться лише його категорії.

### Список всіх категорій за адміністратора[GET]

+ Response 200 (application/json)

    + Body

    {
        [
            {
                "category_id": 3,
                "user_id": 4,
                "email": "medhurst.ignatius@example.com",
                "name": "Urgent tasks",
                "type": ""
            },
            {
                "category_id": 4,
                "user_id": 5,
                "email": "tierra43@example.com",
                "name": "Urgent tasks",
                "type": ""
            }
        ]
    }

### Список всіх категорій за користувача[GET]

+ Response 200 (application/json)

    + Body

        {
            [
                {
                    "category_id": 13,
                    "user_id": 12,
                    "email": "test@test.com",
                    "name": "Urgent tasks",
                    "type": ""
                }
            ]
        }
        
### Створення категорії[POST]

+ Request (application/json)

        {
            "name": "Test category",
            "type": "test"
        }

+ Response 200 (application/json)

    + Body

        {
            "Category created."
        }
        
### Створення категорії з полкою[POST]

+ Request (application/json)

        {
            "type": "test"
        }

+ Response 400 (application/json)

    + Body

        {
            "Category not created. Has error: SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'name' cannot be null (Connection: mysql, SQL: insert into `categories` (`name`, `type`, `user_id`) values (?, , 1))"
        }
        
## Категорії [/category/{category}]
Замість {category} вказати ІД Категорії
### Перегляд певної категорії[GET]

+ Response 200 (application/json)

    + Body

        {
            [
                {
                    "task_id": 6,
                    "user_id": 12,
                    "email": "test@test.com",
                    "name": "tesdt",
                    "description": null,
                    "status": "IN_PROGRESS",
                    "created_at": "2024-10-26T15:29:31.000000Z",
                    "finished_at": null
                }
            ]
        }
        
### Оновлення певної категорії[PATCH]
+ Request (application/json)

        {
            "name": "Test updated",
            "type": "test-upd"
        }
        
+ Response 200 (application/json)

    + Body

        {
            "Category has been updated"
        }

### Видалення певної категорії[DELETE]       
+ Response 200 (application/json)

    + Body

        {
            "Category has been deleted"
        }


## Задачі [/task]
При отриманні списку всіх задач - формується список всіх задач поточного користувача з групуванням по категоріям

### Список всіх задач[GET]        
+ Response 200 (application/json)

    + Body

            {
                "14": [
                    {
                        "id": 6,
                        "name": "tesdt",
                        "description": null,
                        "created_at": "2024-10-26T15:29:31.000000Z",
                        "status": "IN_PROGRESS",
                        "category": "Test updated"
                    }
                ]
            }

### Створення задачі[POST]
+ Request (application/json)

        {
            "name": "Test task",
            "description": "This is the test task",
            "category_id": "14"
        }
        
+ Response 200 (application/json)

    + Body

        {
            "id": 9,
            "name": "Test task",
            "description": "This is the test task",
            "created_at": "2024-10-26T12:41:02.000000Z",
            "status": "IN_PROGRESS",
            "category": "Test updated"
        }
        
## Задачі [/task/{task}]
Замість {task} вказати ІД задачі
### Перегляд певної задачі[GET]
        
+ Response 200 (application/json)

    + Body

            {
                "task_id": 9,
                "user_id": 12,
                "email": "test@test.com",
                "name": "Test task",
                "description": "This is the test task",
                "status": "IN_PROGRESS",
                "created_at": "2024-10-26T12:41:02.000000Z",
                "finished_at": null
            }

### Оновлення певної задачі[PATCH]
+ Request (application/json)

        {
            "name": "Updated task",
            "description": "This is the test task updated",
            "category_id": "14"
        }
        
+ Response 200 (application/json)

    + Body

        {
            "Task successfully updated"
        }

### Видалення певної задачі[DELETE]
+ Response 200 (application/json)

    + Body

        {
            "Task has been deleted"
        }